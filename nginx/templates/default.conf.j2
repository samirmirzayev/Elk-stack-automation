{% if nginx_sonarqube_enabled is defined %}

{% if not nginx_https_enabled %}
server {
  listen 80;
  server_name {{ dns_names[0] }};

  access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
  error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

  location / {
    client_max_body_size 10M;
    proxy_pass http://{{ dns_names[0] }}:{{ nginx_proxy_pass_port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    client_max_body_size 50m;
  }
}
{% endif %}

{% if nginx_https_enabled %}
server {
    listen 443 ssl;
    server_name {{ dns_names[0] }};

    ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
    ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
    error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

    location / {
        client_max_body_size 10M;
        proxy_pass http://{{ dns_names[0] }}:{{ nginx_proxy_pass_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
{% endif %}

{% endif %}


{% if nginx_minio_enabled is defined %}

upstream minio {
{% for host in groups['minio'] %}
        server {{ hostvars[host]['ansible_host'] }}:{{ nginx_proxy_pass_port_api }};
{% endfor %}
}

upstream console {
        ip_hash;
{% for host in groups['minio'] %}
        server {{ hostvars[host]['ansible_host'] }}:{{ nginx_proxy_pass_port_console }};
{% endfor %}
}

{% if not nginx_https_enabled %}
server {
        listen       {{ nginx_listen_port_api }};
        listen  [::]:{{ nginx_listen_port_api }};
        server_name  {{ dns_names[0] }};
        # To allow special characters in headers
        ignore_invalid_headers off;
        
        access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
        error_log /var/log/nginx/{{ dns_names[0] }}_error.log;
        
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;
        location / {
            client_max_body_size 10M;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300;
            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            proxy_pass http://minio;
        }
}

server {
        listen       {{ nginx_listen_port_console }};
        listen  [::]:{{ nginx_listen_port_console }};
        server_name  {{ dns_names[0] }};
        # To allow special characters in headers
        ignore_invalid_headers off;
        
        access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
        error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;
        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            # This is necessary to pass the correct IP to be hashed
            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            
            # To support websocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            chunked_transfer_encoding off;
            proxy_pass http://console;
        }
}
{% endif %}

{% if nginx_https_enabled %}
server {
        listen       {{ nginx_listen_port_api }} ssl;
        listen  [::]:{{ nginx_listen_port_api }} ssl;
        server_name  {{ dns_names[0] }};
        # To allow special characters in headers
        ignore_invalid_headers off;

        ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
        ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
        error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;
        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300;
            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            proxy_pass http://minio;
        }
}

server {
        listen       {{ nginx_listen_port_console }} ssl;
        listen  [::]:{{ nginx_listen_port_console }} ssl;
        server_name  {{ dns_names[0] }};
        # To allow special characters in headers
        ignore_invalid_headers off;

        ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
        ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
        error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;
        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            # This is necessary to pass the correct IP to be hashed
            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            
            # To support websocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            chunked_transfer_encoding off;
            proxy_pass http://console;
        }
}
{% endif %}

{% endif %}


{% if nginx_nexus_enabled is defined %}

####################### NEXUS CONFIGURATION #####################################

{% if not nginx_https_enabled %}
server {
  listen 80;
  server_name {{ dns_names[0] }};

  access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
  error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

  location / {
    proxy_pass http://{{ dns_names[0] }}:{{ nginx_proxy_pass_port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    client_max_body_size 50m;
  }
}
{% endif %}

{% if nginx_https_enabled %}
server {
    listen 443 ssl;
    server_name {{ dns_names[0] }};

    ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
    ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    
    # Improve HTTPS performance with session resumption
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    client_max_body_size 100M;

    access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
    error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

    location / {
        proxy_pass http://{{ dns_names[0] }}:{{ nginx_proxy_pass_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Docker Registry specific configuration
    location /v2/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:{{ nginx_proxy_pass_port }};
        proxy_read_timeout 90;
    }
}
server {
    listen 18002 ssl;
    server_name {{ dns_names[0] }};

    ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
    ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    # Improve HTTPS performance with session resumption
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    access_log /var/log/nginx/{{ dns_names[0] }}_v2_access.log;
    error_log /var/log/nginx/{{ dns_names[0] }}_v2_error.log;

    client_max_body_size 20G;

    location /v2/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:{{ nexus_https_forwarding_port }};
        proxy_read_timeout 90;
    }
}

server {
    listen 18004 ssl;
    server_name {{ dns_names[0] }};
    ssl_certificate /etc/nginx/certs/{{ dns_names[0] }}.pem;
    ssl_certificate_key /etc/nginx/certs/{{ dns_names[0] }}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # Important: Clear all auth for /v2/
    location /v2/ {
        auth_basic off;
        proxy_pass http://127.0.0.1:18003/v2/;
        
        # Clear any existing auth headers
        proxy_set_header Authorization "";
        
        # Standard proxy headers
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
        proxy_set_header X-Forwarded-Port 18004;
        proxy_set_header Docker-Distribution-Api-Version registry/2.0;
        
        # Performance settings
        proxy_buffering off;
        proxy_request_buffering off;
	    client_max_body_size 0;
        proxy_read_timeout 900;
        proxy_connect_timeout 900;
        proxy_send_timeout 900;
    }

    location / {
        proxy_pass http://127.0.0.1:18003;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto "https";
    }
}


{% endif %}

{% endif %}

{% if nginx_elasticsearch_enabled is defined %}

####################### ELASTICSEARCH CONFIGURATION ##################################

{% if not nginx_https_enabled %}
server {
  listen 80;
  server_name {{ dns_names[0] }};

  access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
  error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

  location / {
    client_max_body_size 10M;
    proxy_pass http://{{ dns_names[0] }}:{{ nginx_proxy_pass_port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    client_max_body_size 50m;
  }
}
{% endif %}

{% if nginx_https_enabled %}
server {
    listen 443 ssl;
    server_name {{ dns_names[0] }};

    ssl_certificate {{ nginx_certs_path }}/{{ dns_names[0] }}.pem;
    ssl_certificate_key {{ nginx_certs_path }}/{{ dns_names[0] }}.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

    access_log /var/log/nginx/{{ dns_names[0] }}_access.log;
    error_log /var/log/nginx/{{ dns_names[0] }}_error.log;

    location / {
        client_max_body_size 10M;
        proxy_pass http://127.0.0.1:{{ nginx_proxy_pass_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

}        
    }
{% endif %}

{% endif %}
